import numpy as np
import matplotlib.pyplot as plt

def plot_results_from_bin(bin_filepath):
    with open(bin_filepath, 'rb') as f:
        # Read dimensions
        num_points_x = np.fromfile(f, dtype=np.int32, count=1)[0]
        num_points_t = np.fromfile(f, dtype=np.int32, count=1)[0]

        # Read x_plot, t_plot, u_inference
        x_plot = np.fromfile(f, dtype=np.float32, count=num_points_x)
        t_plot = np.fromfile(f, dtype=np.float32, count=num_points_t)
        u_inference_flat = np.fromfile(f, dtype=np.float32, count=num_points_x * num_points_t)

    # Reshape u_inference_flat to (num_points_t, num_points_x) for plotting
    # Fortran saved u_inference as (1, num_points_x * num_points_t) in column-major order.
    # When read into numpy, it's a 1D array. We need to reshape it to (num_points_x, num_points_t)
    # and then transpose to (num_points_t, num_points_x) for pcolormesh with X, T.
    U_pred = u_inference_flat.reshape(num_points_x, num_points_t).T

    # Create meshgrid for (x, t) pairs for plotting
    X, T = np.meshgrid(x_plot, t_plot)

    # Plotting
    plt.figure(figsize=(10, 6))
    plt.pcolormesh(X, T, U_pred, cmap='viridis', shading='auto')
    plt.colorbar(label='u(x,t)')
    plt.xlabel('x')
    plt.ylabel('t')
    plt.title('Predicted Solution of 1D Burgers\' Equation (from Fortran Inference)')
    plt.show()

if __name__ == "__main__":
    # Adjust the path to the binary file generated by the Fortran program
    bin_filepath = "./examples/fortran/burgers/burgers_inference_results.bin"
    plot_results_from_bin(bin_filepath)
