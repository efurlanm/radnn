# Encontra o pacote HDF5, essencial para leitura e escrita de dados em formato HDF5.
# Especificamos que precisamos do componente Fortran do HDF5.
# A opção REQUIRED garante que a configuração do CMake falhará se o HDF5 (com suporte a Fortran) não for encontrado.
find_package(HDF5 COMPONENTS Fortran REQUIRED)

# Define uma lista de alvos executáveis Fortran que serão construídos.
# Neste caso, temos dois executáveis: 'train' e 'train_distributed'.
set(fortran_example_targets
  train
  train_distributed
)

# Adiciona um alvo executável chamado 'train'.
add_executable(train)
# Define os arquivos de código fonte que serão compilados para criar o executável 'train'.
# A palavra-chave PRIVATE indica que esses arquivos são específicos para a construção deste alvo
# e não devem ser expostos para outros alvos que possam se vincular a ele.
target_sources(train
  PRIVATE
  train.f90
  simulation.f90
)

# Define propriedades específicas para o alvo 'train'.
# Neste caso, estamos definindo o diretório onde os módulos Fortran gerados durante a compilação
# devem ser colocados. ${CMAKE_CURRENT_SOURCE_DIR} representa o diretório atual do arquivo CMakeLists.txt.
# 'mod/0' é o subdiretório dentro do diretório de origem onde os módulos serão armazenados.
set_target_properties(train PROPERTIES Fortran_MODULE_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/mod/0 )

# Adiciona outro alvo executável chamado 'train_distributed'.
add_executable(train_distributed)

# Define os arquivos de código fonte para o executável 'train_distributed'.
target_sources(train_distributed
  PRIVATE
  train_distributed.f90
  simulation.f90
)

# Define as propriedades para o alvo 'train_distributed', similar ao 'train',
# mas com um diretório de módulos Fortran diferente ('mod/1'). Isso pode ser útil para evitar
# conflitos de nomes de módulos se os dois executáveis tiverem dependências de módulos com o mesmo nome.
set_target_properties(train_distributed PROPERTIES Fortran_MODULE_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/mod/1 )

# Inicia um loop sobre cada alvo listado em 'fortran_example_targets' ('train' e 'train_distributed').
foreach(tgt ${fortran_example_targets})

# Define os diretórios de inclusão para o alvo atual ($tgt).
# PRIVATE significa que esses diretórios são necessários apenas durante a compilação deste alvo.
# ${CMAKE_BINARY_DIR}/include: Diretório de inclusão dentro do diretório de construção do CMake.
#                              Pode conter arquivos de cabeçalho gerados durante o processo de construção.
# ${MPI_Fortran_INCLUDE_DIRS}: Diretórios de inclusão necessários para compilar código Fortran que usa MPI (Message Passing Interface).
#                               Esta variável é geralmente definida pelo pacote FindMPI.cmake.
# ${HDF5_Fortran_INCLUDE_DIRS}: Diretórios de inclusão necessários para compilar código Fortran que usa a biblioteca HDF5.
#                                Esta variável é definida pelo find_package(HDF5) que encontramos anteriormente.
  target_include_directories(${tgt}
    PRIVATE
    ${CMAKE_BINARY_DIR}/include
    ${MPI_Fortran_INCLUDE_DIRS}
    ${HDF5_Fortran_INCLUDE_DIRS}
  )

# Especifica as bibliotecas com as quais o alvo atual ($tgt) deve ser vinculado.
# PRIVATE significa que essas bibliotecas são necessárias apenas para este alvo.
# MPI::MPI_Fortran: Interface Fortran da biblioteca MPI (fornecida pelo pacote FindMPI).
# hdf5::hdf5_fortran: Interface Fortran da biblioteca HDF5 (fornecida pelo find_package(HDF5)).
# "${PROJECT_NAME}_fort": Uma biblioteca Fortran interna ao projeto (o nome é derivado do nome do projeto).
# ${PROJECT_NAME}: Uma biblioteca C/C++ interna ao projeto (o nome é o nome do projeto definido no comando 'project(...)').
  target_link_libraries(${tgt} PRIVATE MPI::MPI_Fortran)
  target_link_libraries(${tgt} PRIVATE hdf5::hdf5_fortran)
  target_link_libraries(${tgt} PRIVATE "${PROJECT_NAME}_fort")
  target_link_libraries(${tgt} PRIVATE ${PROJECT_NAME})

# Verifica qual compilador Fortran está sendo usado.
  if (CMAKE_Fortran_COMPILER_ID STREQUAL "NVHPC")

# Define opções de compilação específicas para o compilador NVHPC (NVIDIA HPC SDK).
# $<$<COMPILE_LANGUAGE:Fortran>:...> aplica as opções apenas quando o idioma de compilação é Fortran.
# -cpp: Habilita o pré-processador C para arquivos Fortran.
# -acc: Habilita as diretivas OpenACC para programação paralela em GPUs.
# -gpu=${CUF_GPU_ARG}: Passa um argumento específico da GPU (a variável CUF_GPU_ARG deve ser definida em outro lugar).
    target_compile_options(${tgt} PRIVATE $<$<COMPILE_LANGUAGE:Fortran>:-cpp -acc -gpu=${CUF_GPU_ARG}>)

# Define opções de link específicas para o compilador NVHPC.
# As opções são semelhantes às de compilação, indicando que o link também deve considerar a aceleração por GPU.
    target_link_options(${tgt} PRIVATE $<$<COMPILE_LANGUAGE:Fortran>: -acc -gpu=${CUF_GPU_ARG}>)

# Senão, se o compilador Fortran for GNU gfortran.
  elseif (CMAKE_Fortran_COMPILER_ID STREQUAL "GNU")

# Define opções de compilação específicas para o compilador GNU Fortran.
# -cpp: Habilita o pré-processador C para arquivos Fortran.
# -fbackslash: Permite o uso da barra invertida para continuar linhas de código Fortran (comum em código mais antigo).
# -fopenacc: Habilita o suporte a OpenACC para programação paralela.
    target_compile_options(${tgt} PRIVATE $<$<COMPILE_LANGUAGE:Fortran>:-cpp -fbackslash -fopenacc>)

# Define opções de link específicas para o compilador GNU Fortran.
# -fopenacc: Garante que as bibliotecas OpenACC sejam vinculadas.
    target_link_options(${tgt} PRIVATE $<$<COMPILE_LANGUAGE:Fortran>: -fopenacc>)
  endif()

# Fim do loop foreach.
endforeach()

# Define as regras de instalação para os alvos executáveis Fortran.
install(
  TARGETS ${fortran_example_targets}

# Especifica o diretório de destino para os executáveis durante a instalação.
# ${CMAKE_INSTALL_PREFIX} é um prefixo de instalação configurável pelo usuário (geralmente /usr/local ou /opt/...).
# Os executáveis serão colocados em ${CMAKE_INSTALL_PREFIX}/bin/examples/fortran/simulation.
  RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX}/bin/examples/fortran/simulation
)

# Define as regras de instalação para arquivos de dados e scripts Python.
install(
  FILES ${CMAKE_CURRENT_SOURCE_DIR}/config_mlp_native.yaml
        ${CMAKE_CURRENT_SOURCE_DIR}/config_fcn_torchscript.yaml
        ${CMAKE_CURRENT_SOURCE_DIR}/generate_fcn_model.py
        ${CMAKE_CURRENT_SOURCE_DIR}/visualize.py

# Especifica o diretório de destino para esses arquivos durante a instalação,
# no mesmo local dos executáveis Fortran.
  DESTINATION ${CMAKE_INSTALL_PREFIX}/bin/examples/fortran/simulation)
